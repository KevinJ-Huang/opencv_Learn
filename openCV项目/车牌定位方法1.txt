#include "stdafx.h"
#include <iostream>
#include <vector>
#include <stdint.h>
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/features2d/features2d.hpp"


// 提取竖直的sobel边缘
bool SobelVerEdge(cv::Mat srcImage, cv::Mat& resultImage)
{
	CV_Assert(srcImage.channels() == 1);
	srcImage.convertTo(srcImage, CV_32FC1);
	// 水平方向的 Sobel 算子
	cv::Mat sobelx = (cv::Mat_<float>(3, 3) << -0.125, 0, 0.125,
		-0.25, 0, 0.25,
		-0.125, 0, 0.125);
	cv::Mat ConResMat;
	// 卷积运算
	cv::filter2D(srcImage, ConResMat, srcImage.type(), sobelx);
	// 计算梯度的幅度
	cv::Mat graMagMat;
	cv::multiply(ConResMat, ConResMat, graMagMat);
	// 根据梯度幅度及参数设置阈值
	int scaleVal = 4;
	double thresh = scaleVal * cv::mean(graMagMat).val[0];
	cv::Mat resultTempMat = cv::Mat::zeros(
		graMagMat.size(), graMagMat.type());
	float* pDataMag = (float*)graMagMat.data;
	float* pDataRes = (float*)resultTempMat.data;
	const int nRows = ConResMat.rows;
	const int nCols = ConResMat.cols;
	for (int i = 1; i != nRows - 1; ++i) {
		for (int j = 1; j != nCols - 1; ++j) {
			// 计算该点梯度与水平或垂直梯度值大小比较结果
			bool b1 = (pDataMag[i * nCols + j] > pDataMag[i *
				nCols + j - 1]);
			bool b2 = (pDataMag[i * nCols + j] > pDataMag[i *
				nCols + j + 1]);
			bool b3 = (pDataMag[i * nCols + j] > pDataMag[(i - 1)
				* nCols + j]);
			bool b4 = (pDataMag[i * nCols + j] > pDataMag[(i + 1)
				* nCols + j]);
			// 判断邻域梯度是否满足大于水平或垂直梯度
			// 并根据自适应阈值参数进行二值化
			pDataRes[i * nCols + j] = 255 * ((pDataMag[i *
				nCols + j] > thresh) &&
				((b1 && b2) || (b3 && b4)));
		}
	}
	resultTempMat.convertTo(resultTempMat, CV_8UC1);
	resultImage = resultTempMat.clone();
	return true;
}
// 疑似区域提取
cv::Mat getPlateArea(cv::Mat srcImage, cv::Mat sobelMat)
{
	// 转换成hsv 
	cv::Mat img_h, img_s, img_v, imghsv;
	std::vector<cv::Mat> hsv_vec;
	cv::cvtColor(srcImage, imghsv, CV_BGR2HSV);
	cv::imshow("hsv", imghsv);
	cv::waitKey(0);


	// hsv 限定范围元素提取
	cv::Mat bw_blue;
	cv::inRange(imghsv, cv::Scalar(81, 38, 63), cv::Scalar(135, 255, 255), bw_blue);

	int height = bw_blue.rows;
	int width = bw_blue.cols;
	cv::Mat bw_blue_edge = cv::Mat::zeros(bw_blue.size(), bw_blue.type());
	cv::imshow("bw_blue", bw_blue);
	cv::waitKey(0);
	// 车牌疑似区域提取
	for (int k = 1; k != height - 2; ++k)
	{
		for (int l = 1; l != width - 2; ++l)
		{
			cv::Rect rct;
			rct.x = l - 1;
			rct.y = k - 1;
			rct.height = 3;
			rct.width = 3;
			if ((sobelMat.at<uchar>(k, l) == 255) && (cv::countNonZero(bw_blue(rct)) >= 1))
				bw_blue_edge.at<uchar>(k, l) = 255;
		}
	}
	// 形态学闭操作
	cv::Mat morph;
	cv::morphologyEx(bw_blue_edge, morph, cv::MORPH_CLOSE,
		cv::Mat::ones(2, 25, CV_8UC1));
	cv::imshow("bw_blue_edge", bw_blue_edge);
	cv::waitKey(0);
	// 连通区域轮廓检测
	cv::imshow("morph", morph);
	std::vector<std::vector<cv::Point> > region_contours;
	cv::findContours(morph.clone(), region_contours,
		CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0));
	cv::Mat result;
	for (size_t n = 0; n != region_contours.size(); ++n)
	{
		// 去除高度宽度不符合条件区域
		cv::Rect rect = cv::boundingRect(region_contours[n]);
		int sub = cv::countNonZero(morph(rect));
		double ratio = double(sub) / rect.area();
		double wh_ratio = double(rect.width) / rect.height;
		if (ratio > 0.5 && wh_ratio > 2 && wh_ratio < 5 &&
			rect.height > 12 && rect.width > 60)
		{
			cv::Mat small = bw_blue_edge(rect);
			result = srcImage(rect);
			cv::imshow("rect", srcImage(rect));
			cv::waitKey(0);
		}
	}
	return result;
}
int main()
{
	cv::Mat srcImage = cv::imread("C://Users/NWPU-USTC/Pictures/6404896e5fd1edc180cb4a66.jpg", 1);
	if (!srcImage.data)
		return 1;
	cv::Mat srcGray;
	cv::cvtColor(srcImage, srcGray, CV_RGB2GRAY);
	cv::imshow("srcImage", srcImage);
	// sobel 提取边缘
	cv::Mat sobelMat;

	//Sobel(srcGray, sobelMat, CV_16S, 1, 0, 3, 1,  0, 4);
	//convertScaleAbs(sobelMat, sobelMat); 

	SobelVerEdge(srcGray, sobelMat);
	cv::imshow("Sobel", sobelMat);
	//cv::waitKey(0);
	// 疑似区域提取
	cv::Mat result = getPlateArea(srcImage, sobelMat);
	imshow("result", result);
	return 0;
}












































#include "stdafx.h"
#include <iostream>
#include <vector>
#include <stdint.h>
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/features2d/features2d.hpp"
using namespace cv;
using namespace std;





int main()
{
	Mat edges;  //定义转化的灰度图
	Mat frame = cv::imread("C://Users/NWPU-USTC/Pictures/蓝球2.jpg", 1);
	cv::Mat  hsv;
	std::vector<cv::Mat> hsv_vec;
	vector<int> x_val, y_val;
	double center[2];
	Rect g_rectangle;

	x_val.clear(); y_val.clear();

	Mat imgHSV;
	cvtColor(frame, imgHSV, COLOR_BGR2HSV);

	Mat imgThresholded;
	Mat dstimage;

	inRange(imgHSV, cv::Scalar(45, 38, 63), cv::Scalar(135, 255, 255), imgThresholded);

	Mat element = getStructuringElement(MORPH_RECT, Size(5, 5));
	morphologyEx(imgThresholded, imgThresholded, MORPH_OPEN, element);

	morphologyEx(imgThresholded, imgThresholded, MORPH_CLOSE, element);


	Mat element2 = getStructuringElement(MORPH_RECT, Size(15, 15));

	erode(imgThresholded, dstimage, element2);

	medianBlur(dstimage, imgThresholded, 3);
	imshow("median", imgThresholded);
	waitKey(0);
	x_val.clear(); y_val.clear();
	for (int i = 0; i<imgThresholded.rows; i++){
		for (int j = 0; j<imgThresholded.cols; j++){
			if ((int)imgThresholded.at<uchar>(i, j) != 0){
				x_val.push_back(j);
				y_val.push_back(i);
				center[0] += i;
				center[1] += j;
			}
		}
	}
	if (x_val.size() <= 1000){
		x_val.clear();
		y_val.clear();
	}
	else
	{

		for (int i = 0; i<imgThresholded.rows; i++){
			for (int j = 0; j<imgThresholded.cols; j++){
				dstimage.at<uchar>(i, j) = 0;
			}
		}

		for (int i = 0; i<(int)x_val.size(); i++){
			dstimage.at<uchar>(y_val[i], x_val[i]) = 255;

		}

		// waitKey(0);
		g_rectangle.width = *max_element(x_val.begin(), x_val.end()) - *min_element(x_val.begin(), x_val.end()) + 40;
		g_rectangle.height = *max_element(y_val.begin(), y_val.end()) - *min_element(y_val.begin(), y_val.end()) + 40;
		g_rectangle.x = *min_element(x_val.begin(), x_val.end()) - 20;
		g_rectangle.y = *min_element(y_val.begin(), y_val.end()) - 20;
	}
	imshow("RECT", frame(g_rectangle));




		cvtColor(frame(g_rectangle), edges, CV_BGR2GRAY);


		vector<Vec3f> circles;
		//霍夫圆
		HoughCircles(edges, circles, CV_HOUGH_GRADIENT, 1.5, 10, 200, 100, 0, 0);
		for (size_t i = 0; i < circles.size(); i++)
		{
			Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
			int radius = cvRound(circles[i][2]);
			//绘制圆心  
			circle(frame(g_rectangle), center, 3, Scalar(0, 255, 0), -1, 8, 0);
			//绘制圆轮廓  
			circle(frame(g_rectangle), center, radius, Scalar(155, 50, 255), 3, 8, 0);
			cout << "圆心坐标x= " << cvRound(circles[i][0]) << endl << "圆心坐标y= " 
				<< cvRound(circles[i][1]) << endl;
		}
		imshow("【效果图】", frame);
		if (circles.size()>0) cout << "Yes" << endl;
		else cout << "No" << endl;
	
    waitKey(0);
	return 0;
}


