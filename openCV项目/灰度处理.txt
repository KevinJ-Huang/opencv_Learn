#include "stdafx.h"
#include <iostream>
#include <vector>
#include <stdint.h>
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/features2d/features2d.hpp"
using namespace cv;
using namespace std;




IplImage *g_pGrayImage = NULL;
IplImage *g_pBinaryImage = NULL;
const char *pstrWindowsBinaryTitle = "二值图";
void on_trackbar(int pos)
{
	// 转为二值图    
	cvThreshold(g_pGrayImage, g_pBinaryImage, pos, 255, CV_THRESH_BINARY);
	// 显示二值图    
	cvShowImage(pstrWindowsBinaryTitle, g_pBinaryImage);
}

int detectionChange(Mat& mat1, Mat& mat2, int number);
void verProjection_calculate(Mat& mat1, int* vArr, int number);
int** verProjection_cut(int* vArr, int width, int* number);
float pixelPercentage(Mat& mat1);



// 提取竖直的sobel边缘
bool SobelVerEdge(cv::Mat srcImage, cv::Mat& resultImage)
{
	CV_Assert(srcImage.channels() == 1);
	srcImage.convertTo(srcImage, CV_32FC1);
	// 水平方向的 Sobel 算子
	cv::Mat sobelx = (cv::Mat_<float>(3, 3) << -0.125, 0, 0.125,
		-0.25, 0, 0.25,
		-0.125, 0, 0.125);
	cv::Mat ConResMat;
	// 卷积运算
	cv::filter2D(srcImage, ConResMat, srcImage.type(), sobelx);
	// 计算梯度的幅度
	cv::Mat graMagMat;
	cv::multiply(ConResMat, ConResMat, graMagMat);
	// 根据梯度幅度及参数设置阈值
	int scaleVal = 4;
	double thresh = scaleVal * cv::mean(graMagMat).val[0];
	cv::Mat resultTempMat = cv::Mat::zeros(
		graMagMat.size(), graMagMat.type());
	float* pDataMag = (float*)graMagMat.data;
	float* pDataRes = (float*)resultTempMat.data;
	const int nRows = ConResMat.rows;
	const int nCols = ConResMat.cols;
	for (int i = 1; i != nRows - 1; ++i) {
		for (int j = 1; j != nCols - 1; ++j) {
			// 计算该点梯度与水平或垂直梯度值大小比较结果
			bool b1 = (pDataMag[i * nCols + j] > pDataMag[i *
				nCols + j - 1]);
			bool b2 = (pDataMag[i * nCols + j] > pDataMag[i *
				nCols + j + 1]);
			bool b3 = (pDataMag[i * nCols + j] > pDataMag[(i - 1)
				* nCols + j]);
			bool b4 = (pDataMag[i * nCols + j] > pDataMag[(i + 1)
				* nCols + j]);
			// 判断邻域梯度是否满足大于水平或垂直梯度
			// 并根据自适应阈值参数进行二值化
			pDataRes[i * nCols + j] = 255 * ((pDataMag[i *
				nCols + j] > thresh) &&
				((b1 && b2) || (b3 && b4)));
		}
	}
	resultTempMat.convertTo(resultTempMat, CV_8UC1);
	resultImage = resultTempMat.clone();
	return true;
}
// 疑似区域提取
cv::Mat getPlateArea(cv::Mat srcImage, cv::Mat sobelMat)
{
	// 转换成hsv 
	cv::Mat img_h, img_s, img_v, imghsv;
	std::vector<cv::Mat> hsv_vec;
	cv::cvtColor(srcImage, imghsv, CV_BGR2HSV);
	cv::imshow("hsv", imghsv);
	cv::waitKey(0);


	// hsv 限定范围元素提取
	cv::Mat bw_blue;
	cv::inRange(imghsv, cv::Scalar(81, 38, 63), cv::Scalar(135, 255, 255), bw_blue);

	int height = bw_blue.rows;
	int width = bw_blue.cols;
	cv::Mat bw_blue_edge = cv::Mat::zeros(bw_blue.size(), bw_blue.type());
	cv::imshow("bw_blue", bw_blue);
	cv::waitKey(0);
	// 车牌疑似区域提取
	for (int k = 1; k != height - 2; ++k)
	{
		for (int l = 1; l != width - 2; ++l)
		{
			cv::Rect rct;
			rct.x = l - 1;
			rct.y = k - 1;
			rct.height = 3;
			rct.width = 3;
			if ((sobelMat.at<uchar>(k, l) == 255) && (cv::countNonZero(bw_blue(rct)) >= 1))
				bw_blue_edge.at<uchar>(k, l) = 255;
		}
	}
	// 形态学闭操作
	cv::Mat morph;
	cv::morphologyEx(bw_blue_edge, morph, cv::MORPH_CLOSE,
		cv::Mat::ones(2, 25, CV_8UC1));
	cv::imshow("bw_blue_edge", bw_blue_edge);
	cv::waitKey(0);
	// 连通区域轮廓检测
	cv::imshow("morph", morph);
	std::vector<std::vector<cv::Point> > region_contours;
	cv::findContours(morph.clone(), region_contours,
		CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0));
	cv::Mat result;
	for (size_t n = 0; n != region_contours.size(); ++n)
	{
		// 去除高度宽度不符合条件区域
		cv::Rect rect = cv::boundingRect(region_contours[n]);
		int sub = cv::countNonZero(morph(rect));
		double ratio = double(sub) / rect.area();
		double wh_ratio = double(rect.width) / rect.height;
		if (ratio > 0.5 && wh_ratio > 2 && wh_ratio < 5 &&
			rect.height > 12 && rect.width > 60)
		{
			cv::Mat small = bw_blue_edge(rect);
			result = srcImage(rect);
			cv::imshow("rect", srcImage(rect));
			cv::waitKey(0);
		}
	}
	return result;
}





int detectionChange(Mat& mat1, Mat& mat2, int number){
	IplImage pI_1 = mat1, pI_2;
	CvScalar s1, s2;
	int width = mat1.rows;
	int height = mat1.cols;
	int sum = 0, sum_2 = 0, width_1 = 0, width_2 = 0;
	int i, j;

	for (i = 0; i<width; i++){
		sum = 0;
		sum_2 = 0;
		for (j = 0; j<height - 1; j++){
			s1 = cvGet2D(&pI_1, i, j);
			s2 = cvGet2D(&pI_1, i, j + 1);
			if (((int)s1.val[0]) != ((int)s2.val[0])){
				sum += 1;
				sum_2 = 0;
			}
			else{
				sum_2 += 1;
			}
			if (sum_2 != 0){
				if (height / sum_2 < 5){
					sum = 0;
					break;
				}
			}
		}
		if (sum >= number){
			width_1 = i;
			break;
		}
		else{
			width_1 = i;
		}
	}

	for (i = width - 1; i> 0; i--){
		sum = 0;
		sum_2 = 0;
		for (j = 0; j<height - 1; j++){
			s1 = cvGet2D(&pI_1, i, j);
			s2 = cvGet2D(&pI_1, i, j + 1);
			if (((int)s1.val[0]) != ((int)s2.val[0])){
				sum += 1;
				sum_2 = 0;
			}
			else{
				sum_2 += 1;
			}
			if (sum_2 != 0){
				if (height / sum_2 < 1){
					sum = 0;
					break;
				}
			}
		}
		if (sum >= number){
			width_2 = i;
			break;
		}
		else{
			width_2 = i;
		}
	}
	if (width_2 <= width_1){
		width_2 = width;
	}
	mat2 = cv::Mat(width_2 - width_1 + 1, height, CV_8UC1, 1);
	pI_2 = mat2;
	for (i = width_1; i <= width_2; i++){
		for (j = 0; j<height; j++){
			s1 = cvGet2D(&pI_1, i, j);
			cvSet2D(&pI_2, i - width_1, j, s1);
		}
	}
	return 1;
}
void verProjection_calculate(Mat& mat1, int* vArr, int number){
	IplImage pI_1 = mat1;
	CvScalar s1;
	int width = mat1.rows;
	int height = mat1.cols;
	int i, j;

	for (i = 0; i< number; i++){
		vArr[i] = 0;
	}

	for (j = 0; j<height; j++){
		for (i = 0; i<width; i++){
			s1 = cvGet2D(&pI_1, i, j);
			if (s1.val[0] > 20){
				vArr[j] += 1;
			}
		}
	}
}

int** verProjection_cut(int* vArr, int width, int* number){
	int **a;
	int i, flag = 0;
	int num = 0;
	int threshold = 2;

	a = (int**)malloc(width / 2 * sizeof(int*));

	for (i = 0; i<width - 1; i++){
		if ((vArr[i] <= threshold) && (vArr[i + 1] > threshold)){
			a[num] = (int*)malloc(2 * sizeof(int));
			a[num][0] = i;
			flag = 1;
		}
		else if ((vArr[i] > threshold) && (vArr[i + 1] <= threshold) && (flag != 0)){
			a[num][1] = i;
			num += 1;
			flag = 0;
		}
	}
	*number = num;

	return a;
}

float pixelPercentage(Mat& mat1){
	IplImage pI_1 = mat1;
	CvScalar s1;
	int width = mat1.rows;
	int height = mat1.cols;
	int i, j;
	float sum = 0, allSum = 0, tmp;

	for (i = 0; i<width; i++){
		for (j = 0; j<height; j++){
			s1 = cvGet2D(&pI_1, i, j);
			if (s1.val[0] > 20){
				sum += 1;
			}
			allSum += 1;
		}
	}
	tmp = sum / allSum;

	return tmp;
}






int main()
{
	cv::Mat srcImage = cv::imread("C://Users/NWPU-USTC/Pictures/车牌2.jpg", 1);
	if (!srcImage.data)
		return 1;
	cv::Mat srcGray;
	cv::cvtColor(srcImage, srcGray, CV_RGB2GRAY);
	cv::imshow("srcImage", srcImage);
	// sobel 提取边缘
	cv::Mat sobelMat;

	//Sobel(srcGray, sobelMat, CV_16S, 1, 0, 3, 1,  0, 4);
	//convertScaleAbs(sobelMat, sobelMat); 

	SobelVerEdge(srcGray, sobelMat);
	cv::imshow("Sobel", sobelMat);
	//cv::waitKey(0);
	// 疑似区域提取
	cv::Mat result = getPlateArea(srcImage, sobelMat);




	const char *pstrWindowsSrcTitle = "原图";
	const char *pstrWindowsToolBarName = "二值图阈值";
	IplImage *pSrcImage = &IplImage(result);
	// 转为灰度图    
	g_pGrayImage = cvCreateImage(cvGetSize(pSrcImage), IPL_DEPTH_8U, 1);
	cvCvtColor(pSrcImage, g_pGrayImage, CV_BGR2GRAY);
	// 创建二值图    
	g_pBinaryImage = cvCreateImage(cvGetSize(g_pGrayImage), IPL_DEPTH_8U, 1);
	// 显示原图    
	cvNamedWindow(pstrWindowsSrcTitle, CV_WINDOW_AUTOSIZE);
	cvShowImage(pstrWindowsSrcTitle, pSrcImage);
	// 创建二值图窗口    
	cvNamedWindow(pstrWindowsBinaryTitle, CV_WINDOW_AUTOSIZE);
	// 转为二值图    
	cvThreshold(g_pGrayImage, g_pBinaryImage, 100, 255, CV_THRESH_BINARY);
	// 显示二值图    
	cvShowImage(pstrWindowsBinaryTitle, g_pBinaryImage);
	 // 字符分割  
    Mat img_3;  

	Mat img = cvarrToMat(g_pBinaryImage);
    detectionChange(img, img_3, 7);    
    imshow(" 边缘分离 ",img_3);  


	int width, reWidth = 30, wWidth = 20, pic_width;
	int height, reHeight = 100, wHeight = 20;
	int pic_ArrNumber;
	int vArr[100];
	int **pic_Arr;
	Mat img_4 = img_3;
	// 调整图片的大小。  
	resize(img_3, img_4, Size(100, 30));
	verProjection_calculate(img_4, vArr, reHeight);
	pic_Arr = verProjection_cut(vArr, reHeight, &pic_ArrNumber);

	int i;
	for (i = 0; i< pic_ArrNumber; i++){
		printf("pic_Arr[%d]:%d, %d\n", i, pic_Arr[i][0], pic_Arr[i][1]);
	}
	char str[20] = { 0 };
	sprintf_s(str, "%d", i + 3);
	namedWindow(str);
	imshow("缩小的图像", img_4);


	Mat img_5;
	IplImage pI_1 = (Mat)img_4;
	IplImage pI_2;
	float percentage = 0.0;
	CvScalar s1;
	char str1[20] = { 0 };
	for (i = 0; i< pic_ArrNumber; i++){
		pic_width = pic_Arr[i][1] - pic_Arr[i][0];
		// 字体宽度的度量。  
		if (pic_width < 3){
			continue;
		}

		img_5 = cv::Mat(reWidth, pic_Arr[i][1] - pic_Arr[i][0], CV_8UC1, 1);
		pI_2 = img_5;
		for (int j = 0; j<reWidth; j++){
			for (int k = pic_Arr[i][0]; k<pic_Arr[i][1]; k++){
				s1 = cvGet2D(&pI_1, j, k);
				cvSet2D(&pI_2, j, k - pic_Arr[i][0], s1);
			}
		}
		percentage = pixelPercentage(img_5);
		if (percentage < 0.1){
			continue;
		}
		// 又一次判定 字符的宽度。  
		if (pic_width < 3){
			printf("the %d is 1\n", i);
			continue;
		}
		Mat img_w = img_5;
		// 调整图片的大小。  
		resize(img_5, img_w, Size(10, 40));
		sprintf_s(str1, "%d", i + 10);
		namedWindow(str1);
		imshow(str1, img_w);
	}
	cvWaitKey(0);
	return 0;
}





